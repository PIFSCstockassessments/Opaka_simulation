---
title: "Simulation Outputs"
format: 
    dashboard:
        orientation: rows
        theme: sandstone
---


```{r}
# setup 
library(r4ss)
library(tidyverse)
library(ss3sim)
library(gghighlight)
main.dir <- this.path::here(.. = 1)
source(file.path(main.dir, "R", "mean_length_fun.r"))
```

```{r}
#| echo: false
# read in results from simulation runs

files <- list.files(main.dir, pattern = "hrf_rebuild_sigmar52_rec2", full.names = T)
results.list <-  lapply(files, read.csv)

# rename FRS scenarios to match the naming convention of others
results.list <- lapply(results.list, function(df){
    if("scenario" %in% colnames(df)){
        df$scenario <- gsub("FRS_only_25_yrfwd", "FRSonly_SQ_25_yrfwd", df$scenario)
        df$scenario <- gsub("FRS_only_poorrec_25_yrfwd", "FRSonly_poorrec_25_yrfwd", df$scenario)
    }
    return(df)
})

#get index of list objects for each type of csv
scalar.ind <- grep(pattern = "scalar.csv", x = files)
dq.ind <- grep(pattern = "dq.csv", x = files)
ts.ind <- grep(pattern = "ts.csv", x = files)
agecomp.ind <- grep(pattern = "agecomp.csv", x = files)
lencomp.ind <- grep(pattern = "lencomp.csv", x = files)
index.ind <- grep(pattern = "index.csv", x = files)

#create subset dfs by type
scalar_df <- data.frame(results.list[scalar.ind])
dq_df <- data.frame(results.list[dq.ind])
ts_df <- data.frame(results.list[ts.ind])
agecomp_df <- data.frame(results.list[agecomp.ind])
lencomp_df <- data.frame(results.list[lencomp.ind])
index_df <- data.frame(results.list[index.ind])

#find models that didn't converge for filtering later
nonconverged_its <- scalar_df %>% 
    filter(max_grad > 1e-4) %>% 
    select(c(model_run, iteration,scenario)) %>% 
    mutate(nonconverged_run = paste(scenario, iteration, sep = "_"))
```


# Checking inputs  

### 
```{r}
#filter out non-converged runs
results_ts <- ts_df %>% 
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    select(SpawnBio, Recruit_0, F_1, SPRratio, rec_dev, raw_rec_dev, year, model_run, iteration, scenario)

#calculate relative error of SSB
ts_re <- calculate_re(results_ts)
```

### 
```{r}

results_ts %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "poorrec"), "poorrec", "SQ")) %>% 
filter(model_run == "om") %>% 
filter(iteration < 51) %>%
ggplot() +
geom_line(aes(x = year, y = rec_dev, group = scenario, color = rec_scen)) +
geom_hline(yintercept = 0) +
facet_wrap(~iteration) +
labs(subtitle = "Recruitment deviations in OMs for SQ and poor rec scenarios", x = "Year", y = "Recruitment Deviations")
```
```{r}

results_ts %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "poorrec"), "poorrec", "SQ")) %>% 
filter(model_run == "om") %>% 
filter(iteration > 50) %>%
ggplot() +
geom_line(aes(x = year, y = rec_dev, group = scenario, color = rec_scen)) +
geom_hline(yintercept = 0) +
facet_wrap(~iteration) +
labs(subtitle = "Recruitment deviations in OMs for SQ and poor rec scenarios", x = "Year", y = "Recruitment Deviations")
```

```{r}
#| label: om_em_index_vals
index_df %>% 
filter(Fleet == 3 & iteration == 1) %>%
separate(col = scenario, into = c("scenario", "Rec_scenario", "25", "Yrs"), sep = "_") %>% 
ggplot(aes(x = year)) + 
geom_vline(xintercept = 75, color = "grey60", linetype = 1) +
geom_line(data = . %>% filter(model_run == "om"), 
        aes(y = Exp, color = "Simulated", linetype = "Simulated")) +
geom_point(data = . %>% filter(model_run == "em"), 
            aes(y = Obs, color = "Observed", shape = "Observed"), size = 2) +
geom_line(data = . %>% filter(model_run == "em"), 
        aes(y = Exp, color = "Expected", linetype = "Expected")) +
facet_grid(Rec_scenario ~ scenario, scales = "free_y") + 
scale_color_manual(name = "Data types", 
                    values = c("Simulated" = "blue", 
                            "Observed" = "#1B9E77",
                            "Expected" = "red")) +
scale_linetype_manual(name = "Data types",
                    values = c("Simulated" = 2, 
                            "Observed" = 0,
                            "Expected" = 1)) +
scale_shape_manual(name = "Data types",
                values = c("Simulated" = NA,
                        "Observed" = 16, 
                        "Expected" = NA)) +
labs(x = "Year") +
theme_bw() +
guides(color = guide_legend(override.aes = list(
        shape = c(NA, 16, NA),
        linetype = c(2, 0, 1)
        ))) +
labs(x = "Year", y = "Index of Abundance", 
title = "Comparison of OM generated data to fit data")
```

# Data Fits  

##  
```{r}

index_df %>% 
filter(model_run == "em" & Fleet == 3) %>% 
filter(iteration == 1) %>%
# filter(str_detect(scenario, "HRF")) %>%
# filter(str_detect(scenario, "Selex", negate=T)) %>% 
separate(col = scenario, into = c("scenario", "Rec_scenario", "25", "Yrs"), sep = "_") %>% 
ggplot(aes(x = year)) + 
geom_point(aes(y = Obs, group = Rec_scenario, color = Rec_scenario)) +
geom_line(aes(y = Exp, group = Rec_scenario, color = Rec_scenario)) +
facet_wrap(~scenario) + 
labs(x = "Year", y = "Index of Abundance", 
title = "BFISH Index Fit for One Iteration",
caption = "Points are observed values, lines are expected") +
theme_bw()
```

```{r}
#| label: bfish_resids
index_df <- index_df %>% 
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    mutate(residuals = log(Obs) - log(Exp))

# index_df %>%
# filter(model_run == "em" & Fleet_name == "Comm") %>%
# separate(col = scenario, into = c("scenario", "Rec_scenario", "25", "Yrs"), sep = "_") %>% 
# ggplot(aes(x = year, y = residuals)) + 
# geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
# geom_boxplot(aes(x = year, y = residuals, group = year)) +
# geom_smooth(aes(group = scenario, color = scenario)) +
# facet_grid(scenario ~ Rec_scenario) +  
# ylim(-.5, .5) +
# theme_classic()

index_df %>%
filter(model_run == "em" & Fleet_name == "ResFish") %>%
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot(aes(x = year, y = residuals)) + 
geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
geom_boxplot(aes(x = year, y = residuals, group = year)) + 
geom_smooth(aes(group = scenario, color = scenario)) +
facet_grid(scen ~ Rec_scenario) + 
ylim(-.5, .5) +
labs(x = "Year", y = "Residuals", title = "Residuals for BFISH Index Fits") +
theme_bw()
```


```{r}
index_df %>%
filter(model_run == "em" & Fleet_name == "Comm" & str_detect(scenario, "FRSonly")) %>%
filter(iteration == 1) %>%
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot(aes(x = year)) + 
geom_point(aes(y = Obs, group = Rec_scenario, color = Rec_scenario)) +
geom_line(aes(y = Exp, group = Rec_scenario, color = Rec_scenario)) + 
labs(x = "Year", y = "CPUE", 
title = "FRS CPUE Fit for One Iteration",
caption = "Points are observed values, lines are expected") +
theme_bw()
```

## 

```{r}

lencomp_df %>% 
filter(str_detect(scenario, "FRSonly", negate = T) & iteration == 1) %>% 
#filter(str_detect(scenario, "HRF_SQ") & iteration == 1) %>%
ggplot(aes(x = Bin)) + 
geom_ribbon(data = . %>% filter(model_run == "em"), aes(ymin = 0, ymax = Obs, fill = scenario), alpha = .35) +
# geom_line(data = . %>% filter(model_run == "em"), aes(y = Obs, color = scenario), linetype = 2) +
geom_line(data = . %>% filter(model_run == "em"), aes(y = Exp, color = scenario)) +
facet_wrap(~year) + 
labs(x = "Length", y = "Proportion", caption = "Observed (shaded area), and expected (solid line) length compositions for 1 iteration of scenarios") +
theme_bw()

```

```{r}
#| label: mean_length
#| cache: true

mean_len_df <- mean_length(lencomp_df = lencomp_df)

mean_len_df %>% 
as.data.frame() %>%
tibble::rownames_to_column(var = "index") %>%
separate(col = index, into = c("flt", "yr", "model_run", "iteration", "scen"), 
sep = " ") %>%
separate(col = scen, into = c("scenario", "Rec_scenario", "25", "Yrs"), sep = "_", remove = F) %>%
filter(str_detect(scenario, "FRSonly", negate = T)) %>% 
filter(model_run == "em") %>% 
ggplot(aes(x = Yr)) +
geom_boxplot(aes(y = Obsmn, group = Yr)) +
geom_line(data = . %>% group_by(scenario, Rec_scenario, Yr) %>% summarise(med_exp = quantile(Expmn, .5)), aes(y = med_exp, color = scenario), linewidth = 1.5) + 
facet_grid(scenario ~ Rec_scenario) +
labs(x = "Year", y = "Mean Length at Age") +
theme_bw()

```


# Outputs 

## 
```{r}
n_iterations <- ts_re %>%
group_by(scenario) %>% 
summarise(n_iterations = n_distinct(iteration))

n_iterations
```

```{r}
ts_re %>%
filter(year <= 2048) %>%
group_by(scenario, year) %>% 
summarise(med_re = quantile(SpawnBio_re, .5),
uci = quantile(SpawnBio_re, .975),
lci = quantile(SpawnBio_re, .05)) %>%
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scen), alpha = .25) + 
geom_line(aes(x = year, y = med_re, color = scen), linewidth = 1.2) +
#geom_text(data = n_iterations, aes(label=paste0("n = ", n_iterations), 
#x = 6, y=.24),size=5,vjust=-0.5) +
facet_wrap(~ Rec_scenario) + 
labs(x = "Year", y = "SSB MRE") + 
theme_bw()
```

```{r}
ts_re %>%
group_by(scenario, year) %>% 
filter(iteration == 10) %>% 
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = SpawnBio_om, color = scenario), linetype = 2) + 
geom_line(aes(x = year, y = SpawnBio_em, color = scenario)) +
facet_grid(scen ~ Rec_scenario) + 
labs(x = "Year", y = "SSB") + 
theme_bw()
```

##  
```{r}
ts_re %>%
group_by(scenario, year) %>% 
filter(year < 101) %>%
summarise(med_re = mean(F_1_re), 
uci = quantile(F_1_re, .95), 
lci = quantile(F_1_re, .05)) %>% 
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scen), alpha = .25) + 
geom_line(aes(x = year, y = med_re, color = scen), linewidth = 1.2) +
facet_wrap(~Rec_scenario) + 
labs(x = "Year", y = "F MRE") + 
theme_bw()

```

```{r}
ts_re %>%
group_by(scenario, year) %>% 
filter(iteration == 10) %>% 
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = F_1_om, color = scenario), linetype = 2) + 
geom_line(aes(x = year, y = F_1_em, color = scenario)) +
facet_grid(scen ~ Rec_scenario) + 
labs(x = "Year", y = "F") + 
theme_bw()
```

##  
```{r}
#| eval: false
ts_re %>%
group_by(scenario, year) %>% 
filter(year < 101) %>%
summarise(med_re = quantile(SpawnBio_re, .5)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
gghighlight(str_detect(scenario, "SQ")) +
labs(x = "Year", y = "SSB MRE") + 
theme_bw()
```
```{r}
#| eval: false
ts_re %>%
group_by(scenario, year) %>% 
filter(year < 101) %>%
summarise(med_re = quantile(SpawnBio_re, .5)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
gghighlight(str_detect(scenario, "poorrec")) +
labs(x = "Year", y = "SSB MRE") + 
theme_bw()


```

```{r}
ts_re %>% 
group_by(scenario, year) %>% 
filter(year > 1) %>%
summarise(med_re = quantile(rec_dev_re, .5, na.rm = TRUE),
uci = quantile(rec_dev_re, .95, na.rm = TRUE),
lci = quantile(rec_dev_re, .05, na.rm = TRUE)) %>% 
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scen), alpha = .25) + 
geom_line(aes(x = year, y = med_re, color = scen), linewidth = 1.2) +
facet_wrap(~Rec_scenario) + 
labs(x = "Year", y = "Rec Dev MRE") + 
theme_bw()

ts_re %>% 
group_by(scenario, year) %>% 
filter(year > 1) %>%
summarise(med_re = quantile(Recruit_0_re, .5, na.rm = TRUE),
uci = quantile(Recruit_0_re, .95, na.rm = TRUE),
lci = quantile(Recruit_0_re, .05, na.rm = TRUE)) %>% 
separate(col = scenario, into = c("scen", "Rec_scenario", "25", "Yrs"), sep = "_",
remove = F) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
# geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scen), alpha = .25) + 
geom_line(aes(x = year, y = med_re, color = scen), linewidth = 1.2) +
facet_wrap(~Rec_scenario) + 
labs(x = "Year", y = "Recruitment MRE") + 
theme_bw()

```

```{r}

#| label: boxplots
## plots for relative error of management specific values 

results_scalar <- scalar_df %>%  
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    select(-run_ID)

scalar_re <- calculate_re(results_scalar)

## quantities to keep track of 
### depletion_re, F_MSY_re, SR_LN_R0_re, SSB_MSY_re, Totbio_Unfished_re

# scalar_re %>% 
# select(c(iteration, scenario, depletion_re, SR_LN_R0_re, SSB_MSY_re, F_MSY_re)) %>%
# pivot_longer(cols = c(depletion_re, SR_LN_R0_re, SSB_MSY_re, F_MSY_re)) %>% 
# ggplot() +
# geom_boxplot(aes(x = scenario, y = value, fill = scenario)) + 
# geom_hline(yintercept = 0, color = "grey50", linetype = 2) +
# facet_wrap(~name, scales = "free_y") +
# scale_x_discrete(labels = NULL, breaks = NULL) +
# labs(x = "Management Quants", y = "RE") + 
# theme_bw()

ref_pt_df <- scalar_df %>% select(scenario, iteration, model_run, SSB_MSY, F_MSY) 
ref_pt_df <- ts_df %>% 
filter(year == 100) %>% 
select(scenario, iteration, model_run, SpawnBio, F_1, F_2) %>% 
left_join(ref_pt_df, by = c("scenario", "iteration", "model_run")) %>% 
mutate(annual_F = round(F_1 + F_2, 3),
       bmsst = SSB_MSY*.865,
       ssb_ssbmsst = SpawnBio/bmsst,
       F_Fmsy = annual_F/F_MSY) %>% 
select(-c(F_1, F_2)) 

ref_pt_re <- calculate_re(ref_pt_df)

ref_pt_re %>% 
select(c(iteration, scenario, SpawnBio_re, bmsst_re, ssb_ssbmsst_re, annual_F_re, F_MSY_re, F_Fmsy_re)) %>%
pivot_longer(cols = c(SpawnBio_re, bmsst_re, ssb_ssbmsst_re, annual_F_re, F_MSY_re, F_Fmsy_re)) %>% 
ggplot() +
geom_boxplot(aes(x = scenario, y = value, fill = scenario)) + 
geom_hline(yintercept = 0, color = "grey50", linetype = 2) +
facet_wrap(~name, scales = "free_y") +
scale_x_discrete(labels = NULL, breaks = NULL) +
labs(x = "Reference Points", y = "RE") + 
theme_bw()

```

# Diagnostics  

```{r}
#| title: "SSB_SSBMSST Confusion Matrix"
#library(caret)

# Function to create confusion matrix for a specific scenario (all metrics calculated manually)
create_confusion_matrix <- function(data, scenario_name, metric_col = "ssb_ssbmsst", threshold = 1, direction = "greater", verbose = F) {
  # Filter data for the specific scenario
  scenario_data <- data %>% 
    filter(scenario == scenario_name)
  
  # Print diagnostic information
  if(verbose){
    cat("===== DIAGNOSTIC INFORMATION =====\n")
    cat("Scenario:", scenario_name, "\n")
    cat("Number of rows after filtering:", nrow(scenario_data), "\n")
    
    # Check unique iterations and model runs
    cat("Number of unique iterations:", length(unique(scenario_data$iteration)), "\n")
    cat("Model runs present:", paste(unique(scenario_data$model_run), collapse = ", "), "\n")
  }

  # Check for data completeness
  completeness_check <- scenario_data %>%
    group_by(iteration) %>%
    summarize(
      model_count = n_distinct(model_run),
      has_om = "om" %in% model_run,
      has_em = "em" %in% model_run
    )

  if(verbose){
    cat("Iterations with both model runs:", sum(completeness_check$model_count == 2), "\n")
    cat("Iterations missing om:", sum(!completeness_check$has_om), "\n")
    cat("Iterations missing em:", sum(!completeness_check$has_em), "\n")
  }

  # Create wide format
  wide_data <- scenario_data %>%
    pivot_wider(
      id_cols = iteration,
      names_from = model_run,
      values_from = all_of(metric_col)
    )

   if(verbose){ 
    # Count missing values in wide format
    cat("Wide format rows:", nrow(wide_data), "\n")
    cat("Missing om values:", sum(is.na(wide_data$om)), "\n")
    cat("Missing em values:", sum(is.na(wide_data$em)), "\n")
   }
  # Filter out rows with missing values
  wide_data_complete <- wide_data %>% 
    filter(!is.na(om) & !is.na(em))
  
  if(verbose){
    cat("Complete cases after filtering NAs:", nrow(wide_data_complete), "\n")
  }

  # Check binary class distribution
  if(direction == "greater"){
    om_binary <- wide_data_complete$om > threshold
    em_binary <- wide_data_complete$em > threshold
  }
  if(direction == "less"){
    om_binary <- wide_data_complete$om < threshold
    em_binary <- wide_data_complete$em < threshold
  }
  
  if(verbose){
    cat("\n===== BINARY CLASSIFICATION COUNTS =====\n")
    cat("om > threshold:", sum(om_binary), "\n")
    cat("om ≤ threshold:", sum(!om_binary), "\n")
    cat("em > threshold:", sum(em_binary), "\n")
    cat("em ≤ threshold:", sum(!em_binary), "\n")
  }
  
  # Create manual 2x2 table to see all combinations
  manual_table <- table(Predicted = em_binary, Reference = om_binary)
  if(verbose){
    cat("\n===== MANUAL CONFUSION MATRIX =====\n")
    print(manual_table)
  }

  # Check if we have edge cases
  all_om_positive <- all(om_binary)
  all_om_negative <- all(!om_binary)
  all_em_positive <- all(em_binary)
  all_em_negative <- all(!em_binary)
  
  # Handle case where all predictions are the same class
  if(verbose){
  if(all_om_positive || all_om_negative || all_em_positive || all_em_negative ) {
    cat("\n===== EDGE CASE DETECTED =====\n")
    if(all_om_positive) cat("All om values are > threshold (all positive reference)\n")
    if(all_om_negative) cat("All om values are ≤ threshold (all negative reference)\n")
    if(all_em_positive) cat("All em values are > threshold (all positive predictions)\n")
    if(all_em_negative) cat("All em values are ≤ threshold (all negative predictions)\n")
  }
  } 
    # Calculate metrics manually
    TP <- sum(om_binary & em_binary)
    TN <- sum(!om_binary & !em_binary)
    FP <- sum(!om_binary & em_binary)
    FN <- sum(om_binary & !em_binary)
    
    accuracy <- (TP + TN) / (TP + TN + FP + FN)
    
    # Calculate non-NA metrics where possible
    sensitivity <- if(TP + FN > 0) TP / (TP + FN) else NA
    specificity <- if(TN + FP > 0) TN / (TN + FP) else NA
    ppv <- if(TP + FP > 0) TP / (TP + FP) else NA
    npv <- if(TN + FN > 0) TN / (TN + FN) else NA
    
    if(verbose){
        cat("\n===== CONFUSION MATRIX METRICS =====\n")
        cat("Accuracy:", accuracy, "\n")
        cat("Sensitivity (Recall):", sensitivity, "\n")
        cat("Specificity:", specificity, "\n")
        cat("PPV (Precision):", ppv, "\n")
        cat("NPV:", npv, "\n")
    }
    
    # Create a results structure similar to confusionMatrix
    result <- list(
      table = manual_table,
      overall = c(Accuracy = accuracy),
      byClass = c(
        Sensitivity = sensitivity,
        Specificity = specificity,
        "Pos Pred Value" = ppv,
        "Neg Pred Value" = npv
      ),
      summary_table = data.frame(
        Scenario = scenario_name, 
        Accuracy = accuracy,
        Sensitivity = sensitivity, 
        Specificity = specificity, 
        PPV = ppv,
        NPV = npv)
    )

    return(result)
  }
  
# Example using the default column name (ssb_ssbmst)
LRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "LRF_SQ_25_yrfwd")
LRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "LRF_poorrec_25_yrfwd")
IRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "IRF_SQ_25_yrfwd")
IRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "IRF_poorrec_25_yrfwd")
HRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "HRF_SQ_25_yrfwd")
HRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "HRF_poorrec_25_yrfwd")
FRSonly_SQ_conmat <- create_confusion_matrix(ref_pt_df, "FRSonly_SQ_25_yrfwd")
FRSonly_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "FRSonly_poorrec_25_yrfwd")


conmat_summary <- rbind(LRF_SQ_conmat[["summary_table"]], LRF_poorrec_conmat[["summary_table"]],
IRF_SQ_conmat[["summary_table"]], IRF_poorrec_conmat[["summary_table"]],
HRF_SQ_conmat[["summary_table"]], HRF_poorrec_conmat[["summary_table"]],
FRSonly_SQ_conmat[["summary_table"]], FRSonly_poorrec_conmat[["summary_table"]])

conmat_summary

```

```{r}
#| title: "F_FMSY Confusion Matrix"
ref_pt_df %>% filter(F_Fmsy > 1)

# Example using the default column name (ssb_ssbmst)
LRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "LRF_SQ_25_yrfwd", 
                    metric_col = "F_Fmsy", threshold = 1, direction = "less")
LRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "LRF_poorrec_25_yrfwd", 
                        metric_col = "F_Fmsy", threshold = 1, direction = "less")
IRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "IRF_SQ_25_yrfwd", 
                    metric_col = "F_Fmsy", threshold = 1, direction = "less")
IRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "IRF_poorrec_25_yrfwd", 
                        metric_col = "F_Fmsy", threshold = 1, direction = "less")
HRF_SQ_conmat <- create_confusion_matrix(ref_pt_df, "HRF_SQ_25_yrfwd", 
                    metric_col = "F_Fmsy", threshold = 1, direction = "less")
HRF_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "HRF_poorrec_25_yrfwd", 
                        metric_col = "F_Fmsy", threshold = 1, direction = "less")
FRSonly_SQ_conmat <- create_confusion_matrix(ref_pt_df, "FRSonly_SQ_25_yrfwd", 
                        metric_col = "F_Fmsy", threshold = 1, direction = "less")
FRSonly_poorrec_conmat <- create_confusion_matrix(ref_pt_df, "FRSonly_poorrec_25_yrfwd", 
                            metric_col = "F_Fmsy", threshold = 1, direction = "less")

conmat_summary <- rbind(LRF_SQ_conmat[["summary_table"]], LRF_poorrec_conmat[["summary_table"]],
IRF_SQ_conmat[["summary_table"]], IRF_poorrec_conmat[["summary_table"]],
HRF_SQ_conmat[["summary_table"]], HRF_poorrec_conmat[["summary_table"]],
FRSonly_SQ_conmat[["summary_table"]], FRSonly_poorrec_conmat[["summary_table"]])

conmat_summary
```

```{r}
#| label: index
#| eval: false
index_df <- index_df %>% 
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    mutate(residuals = log(Obs) - log(Exp))

index_df %>%
filter(model_run == "em" & Fleet_name == "Comm") %>%
ggplot(aes(x = year, y = residuals)) + 
geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
geom_boxplot(aes(x = year, y = residuals, group = year)) +
# geom_segment(aes(x = year, y = 0, yend = residuals)) +
#geom_line(aes(group = residuals)) (may need to play around with this but should make it so you don't need segments)
#geom_point(aes(color = scenario), alpha = .5) + 
geom_smooth(aes(group = scenario, color = scenario)) +
facet_wrap(~scenario, scales = "free_x") + 
ylim(-.5, .5) +
theme_classic()

index_df %>%
filter(model_run == "em" & Fleet_name == "ResFish") %>%
ggplot(aes(x = year, y = residuals)) + 
geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
geom_boxplot(aes(x = year, y = residuals, group = year)) +
# geom_segment(aes(x = year, y = 0, yend = residuals)) +
#geom_point(aes(color = scenario), alpha = .5) + 
geom_smooth(aes(group = scenario, color = scenario)) +
facet_wrap(~scenario, scales = "free_x") + 
ylim(-.5, .5) +
theme_classic()
```

```{r}
#| label: runstest
#| eval: false
## runstest 
runs_list <- index_df |> filter(model_run == "em") |> mutate(resid = log(Obs) - log(Exp)) |> group_by(scenario, iteration, Fleet) |> group_map(~randtests::runs.test(.x$resid, alternative = "left.sided"))

index_df %>% 
select(scenario, iteration, Fleet) %>% 
distinct() %>% 
mutate(runs_pvalue = runs_list %>% map(~ pluck(., "p.value")) %>% unlist()) %>% 
ggplot() +
geom_point(aes(x = as.factor(scenario), y = runs_pvalue), color = "steelblue", alpha = 0.5, size = 4) +
facet_wrap(~Fleet) +
geom_hline(yintercept = 0.05, color = "grey50", linetype = 2) + 
theme_classic() 


```



