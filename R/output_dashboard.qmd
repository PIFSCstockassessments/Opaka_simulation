---
title: "Simulation Outputs"
format: 
    dashboard:
        orientation: rows
        theme: sandstone
---


```{r}
# setup 
library(r4ss)
library(tidyverse)
library(ss3sim)
library(gghighlight)
main.dir <- this.path::here(.. = 1)
```

```{r}
#| echo: false
# read in results from simulation runs

files <- list.files(main.dir, pattern = "FRS_HRF_scens_", full.names = T)
results.list <-  lapply(files, read.csv)

#get index of list objects for each type of csv
scalar.ind <- grep(pattern = "scalar.csv", x = files)
dq.ind <- grep(pattern = "dq.csv", x = files)
ts.ind <- grep(pattern = "ts.csv", x = files)
agecomp.ind <- grep(pattern = "agecomp.csv", x = files)
lencomp.ind <- grep(pattern = "lencomp.csv", x = files)
index.ind <- grep(pattern = "index.csv", x = files)

#create subset dfs by type
scalar_df <- data.frame(results.list[scalar.ind])
dq_df <- data.frame(results.list[dq.ind])
ts_df <- data.frame(results.list[ts.ind])
agecomp_df <- data.frame(results.list[agecomp.ind])
lencomp_df <- data.frame(results.list[lencomp.ind])
index_df <- data.frame(results.list[index.ind])


#find models that didn't converge for filtering later
nonconverged_its <- scalar_df %>% 
    filter(max_grad > 1e-4) %>% 
    select(c(model_run, iteration,scenario)) %>% 
    mutate(nonconverged_run = paste(scenario, iteration, sep = "_"))
```

# Checking inputs  

### 
```{r}
#filter out non-converged runs
results_ts <- ts_df %>% 
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    select(SpawnBio, Recruit_0, F_1, SPRratio, rec_dev, raw_rec_dev, year, model_run, iteration, scenario)

#calculate relative error of SSB
ts_re <- calculate_re(results_ts)
```

### 
```{r}

results_ts %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "SQ"), "SQ", "poorrec")) %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "FRS_only_25_yrfwd"), "SQ", rec_scen)) %>%
filter(model_run == "om") %>% 
filter(iteration < 51) %>%
ggplot() +
geom_line(aes(x = year, y = rec_dev, group = scenario, color = rec_scen)) +
geom_hline(yintercept = 0) +
facet_wrap(~iteration) +
labs(subtitle = "Recruitment deviations in OMs for SQ and poor rec scenarios", x = "Year", y = "Recruitment Deviations")
```
```{r}
results_ts %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "SQ"), "SQ", "poorrec")) %>% 
mutate(rec_scen = ifelse(str_detect(scenario, "FRS_only_25_yrfwd"), "SQ", rec_scen)) %>%
filter(model_run == "om") %>% 
filter(iteration > 50) %>%
ggplot() +
geom_line(aes(x = year, y = rec_dev, group = scenario, color = rec_scen)) +
geom_hline(yintercept = 0) +
facet_wrap(~iteration) +
labs(subtitle = "Recruitment deviations in OMs for SQ and poor rec scenarios", x = "Year", y = "Recruitment Deviations")
```

# Outputs 

## 
```{r}

ts_re %>%
group_by(scenario, year) %>% 
summarise(med_re = quantile(SpawnBio_re, .5),
uci = quantile(SpawnBio_re, .95),
lci = quantile(SpawnBio_re, .05)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scenario), alpha = .5) + 
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
facet_wrap(~scenario) + 
labs(x = "Year", y = "SSB MRE") + 
theme_bw()
```

```{r}
ts_re %>%
group_by(scenario, year) %>% 
filter(iteration <= 10) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = SpawnBio_om, color = scenario), linetype = 2) + 
geom_line(aes(x = year, y = SpawnBio_em, color = scenario)) +
facet_wrap(~iteration) + 
labs(x = "Year", y = "SSB") + 
theme_bw()
```

##  
```{r}
ts_re %>%
group_by(scenario, year) %>% 
summarise(med_re = quantile(F_1_re, .5), uci = quantile(F_1_re, .95), lci = quantile(F_1_re, .05)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_ribbon(aes(x = year, ymin = lci, ymax = uci, fill = scenario), alpha = .5) + 
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
facet_wrap(~scenario) + 
labs(x = "Year", y = "F MRE") + 
theme_bw()

```

##  
```{r}
ts_re %>%
group_by(scenario, year) %>% 
summarise(med_re = quantile(SpawnBio_re, .5)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
gghighlight(str_detect(scenario, "poorrec")) +
labs(x = "Year", y = "SSB MRE") + 
theme_bw()
```
```{r}
ts_re %>%
group_by(scenario, year) %>% 
summarise(med_re = quantile(SpawnBio_re, .5)) %>% 
ggplot() +
geom_hline(yintercept = 0, color = "grey60") +
geom_line(aes(x = year, y = med_re, color = scenario), linewidth = 1.2) +
gghighlight(str_detect(scenario, "FRS_only_25_yrfwd|SQ")) +
labs(x = "Year", y = "SSB MRE") + 
theme_bw()


```

##  
```{r}
#| eval: false
index_df %>% 
filter(model_run == "em" & Fleet == 3) %>% 
filter(iteration == 1) %>%
filter(str_detect(scenario, "HRF")) %>%
filter(str_detect(scenario, "Selex", negate=T)) %>% 
ggplot(aes(x = year)) + 
geom_point(aes(y = Obs, group = scenario, color = scenario)) +
geom_line(aes(y = Exp, group = scenario, color = scenario)) +
labs(x = "Year", y = "Index of Abundance") +
theme_bw()
```

```{r}
#| eval: false
index_df %>% 
filter(Fleet == 3 & iteration == 1 & str_detect(scenario, "HRF")) %>%
ggplot(aes(x = year)) + 
geom_vline(xintercept = 75, color = "grey60") +
geom_line(data = . %>% filter(model_run == "om"), aes(y = Exp), color = "blue", linetype = 2) +
geom_point(data = . %>% filter(model_run == "em"), aes(y = Obs), color = "#1B9E77", size = 2) +
geom_line(data = . %>% filter(model_run == "em"), aes(y = Exp), color = "red") +
facet_wrap(~scenario) + 
theme_bw() +
labs(x = "Year", y = "Index of Abundance")
```

```{r}
#| eval: false
lencomp_df %>% 
#filter(str_detect(scenario, "FRS_only", negate = T)) %>% 
filter(str_detect(scenario, "HRF_SQ") & iteration == 1) %>%
ggplot(aes(x = Bin)) + 
geom_ribbon(data = . %>% filter(model_run == "om"), aes(ymin = 0, ymax = Exp, fill = scenario), alpha = .35) +
geom_line(data = . %>% filter(model_run == "em"), aes(y = Obs, color = scenario), linetype = 2) +
geom_line(data = . %>% filter(model_run == "em"), aes(y = Exp, color = scenario)) +
facet_wrap(~year) + 
labs(x = "Length", y = "Proportion", caption = "Actual (OM, shaded area), observed (dashed line), and expected (solid line) length compositions for 1 iteration of HRF scenarios") +
theme_bw()

```
```{r}
#| eval: false
#| label: boxplots
## plots for relative error of management specific values 

results_scalar <- scalar_df %>%  
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    select(-run_ID)

scalar_re <- calculate_re(results_scalar)

## quantities to keep track of 
### depletion_re, F_MSY_re, SR_LN_R0_re, SSB_MSY_re, Totbio_Unfished_re

scalar_re %>% 
select(c(iteration, scenario, depletion_re, SR_LN_R0_re, SSB_MSY_re)) %>%
pivot_longer(cols = c(depletion_re, SR_LN_R0_re, SSB_MSY_re)) %>% 
ggplot() +
geom_boxplot(aes(x = name, y = value, fill = scenario)) + 
geom_hline(yintercept = 0, color = "grey50", linetype = 2) +
labs(x = "Management Quants", y = "RE") + 
theme_classic()


```

# Diagnostics  
```{r}
#| label: index
index_df <- index_df %>% 
    mutate(run_ID = paste(scenario, iteration, sep = "_")) %>% 
    filter(! run_ID %in% nonconverged_its$nonconverged_run) %>% 
    mutate(residuals = log(Obs) - log(Exp))

index_df %>%
filter(model_run == "em" & Fleet_name == "Comm") %>%
ggplot(aes(x = year, y = residuals)) + 
geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
geom_boxplot(aes(x = year, y = residuals, group = year)) +
# geom_segment(aes(x = year, y = 0, yend = residuals)) +
#geom_line(aes(group = residuals)) (may need to play around with this but should make it so you don't need segments)
#geom_point(aes(color = scenario), alpha = .5) + 
geom_smooth(aes(group = scenario, color = scenario)) +
facet_wrap(~scenario, scales = "free_x") + 
ylim(-.5, .5) +
theme_classic()

# index_df %>%
# filter(model_run == "em" & Fleet_name == "ResFish") %>%
# ggplot(aes(x = year, y = residuals)) + 
# geom_hline(yintercept = 0, linetype = 2, color = "grey50") +
# geom_boxplot(aes(x = year, y = residuals, group = year)) +
# # geom_segment(aes(x = year, y = 0, yend = residuals)) +
# #geom_point(aes(color = scenario), alpha = .5) + 
# geom_smooth(aes(group = scenario, color = scenario)) +
# facet_wrap(~scenario, scales = "free_x") + 
# ylim(-.5, .5) +
# theme_classic()
```

```{r}
#| label: runstest
## runstest 
runs_list <- index_df |> filter(model_run == "em") |> mutate(resid = log(Obs) - log(Exp)) |> group_by(scenario, iteration, Fleet) |> group_map(~randtests::runs.test(.x$resid, alternative = "left.sided"))

index_df %>% 
select(scenario, iteration, Fleet) %>% 
distinct() %>% 
mutate(runs_pvalue = runs_list %>% map(~ pluck(., "p.value")) %>% unlist()) %>% 
ggplot() +
geom_point(aes(x = as.factor(scenario), y = runs_pvalue), color = "steelblue", alpha = 0.5, size = 4) +
facet_wrap(~Fleet) +
geom_hline(yintercept = 0.05, color = "grey50", linetype = 2) + 
theme_classic() 


```



